openapi: 3.0.0
info:
  title: Wallet API
  version: 1.0.0
  description: Simple Wallet API with Users, Wallets, Beneficiaries, Payouts, and Webhooks

# servers:
#   - url: http://localhost:4000
#     description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string

    Wallet:
      type: object
      properties:
        id:
          type: string
        balance:
          type: number
        userId:
          type: string

    Beneficiary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        account:
          type: string
        userId:
          type: string

    Payout:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
        status:
          type: string
        userId:
          type: string
        beneficiaryId:
          type: string
        createdAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        200:
          description: User registered successfully

  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /wallet:
    get:
      summary: Get wallet of logged in user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Wallet info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"

  /wallet/seed:
    post:
      summary: Seed wallet balance (dev only)
      security:
        - bearerAuth: []
      responses:
        200:
          description: Wallet seeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"

  /beneficiaries:
    post:
      summary: Create a new beneficiary
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                account:
                  type: string
      responses:
        200:
          description: Beneficiary created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Beneficiary"

    get:
      summary: List all beneficiaries
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        200:
          description: Beneficiaries list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Beneficiary"

  /payouts:
    post:
      summary: Create a payout
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                beneficiaryId:
                  type: string
      responses:
        200:
          description: Payout created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payout"

    get:
      summary: List payouts
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
        - name: startDate
          in: query
          schema:
            type: string
        - name: endDate
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        200:
          description: Payout list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payout"

  /payouts/{id}:
    get:
      summary: Get payout details by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Payout info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payout"

  /payouts/{id}/simulate:
    post:
      summary: Simulate payout processing
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Payout simulated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payout"

  /webhooks/gateway:
    post:
      summary: Mock gateway webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payoutId:
                  type: string
                status:
                  type: string
                  enum: [SUCCESS, FAILED]
      responses:
        200:
          description: Webhook processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
